# In this project, I am writing queries to analyze customer orders from multiple tables

#1. How many orders were placed in January? 

SELECT count(orderID) 
  FROM BIT_DB.JanSales
 WHERE length(orderID) = 6 AND 
       orderID <> 'Order ID';

#2. How many of those orders were for an iPhone? 

SELECT count(orderID) 
  FROM BIT_DB.JanSales
 WHERE length(orderID) = 6 AND 
       orderID <> 'Order ID' AND 
       Product = 'iPhone';

#3. Select the customer account numbers for all the orders that were placed in February.

SELECT DISTINCT acctnum
  FROM BIT_DB.FebSales Feb
       INNER JOIN
       BIT_DB.customers cust ON Feb.orderID = cust.order_id
 WHERE length(orderID) = 6 AND 
       orderID <> 'Order ID';

#4. Which product was the cheapest one sold in January, and what was the price?

SELECT DISTINCT Product,
                price
  FROM BIT_DB.JanSales
 WHERE price IN (
           SELECT min(price) 
             FROM BIT_DB.JanSales
       );

#5. What is the total revenue for each product sold in January?

SELECT Product,
       sum(Quantity) * price AS Revenue
  FROM BIT_DB.JanSales
 GROUP BY Product;

#6. Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?

SELECT Product,
       sum(quantity) AS [Order Quantity],
       sum(Quantity) * price AS Revenue
  FROM BIT_DB.FebSales
 WHERE location = '548 Lincoln St, Seattle, WA 98101'
 GROUP BY Product;

#7. How many customers ordered more than 2 products at a time, and what was the average amount spent for those customers? 

SELECT count(DISTINCT cust.acctnum),
       avg(quantity * price) 
  FROM BIT_DB.FebSales Feb
       LEFT JOIN
       BIT_DB.customers cust ON FEB.orderid = cust.order_id
 WHERE Feb.Quantity > 2 AND 
       length(orderid) = 6 AND 
       orderid <> 'Order ID';
